name: Spring - Main Branch CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'spring/**'
      - '.github/workflows/spring-*.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy-spring:
    name: Build and Deploy Spring to Production
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./spring
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Java 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-spring-m2-${{ hashFiles('spring/**/pom.xml') }}
        restore-keys: ${{ runner.os }}-spring-m2

    - name: Determine semantic version
      id: version
      uses: paulhatch/semantic-version@v5.4.0
      with:
        tag_prefix: "spring-v"
        major_pattern: "BREAKING CHANGE:"
        minor_pattern: "feat:"
        version_format: "${major}.${minor}.${patch}"
        bump_each_commit: false

    - name: Update version in pom.xml
      run: |
        mvn versions:set -DnewVersion=${{ steps.version.outputs.version }} -DgenerateBackupPoms=false

    - name: Run tests
      run: |
        mvn clean test
        mvn failsafe:integration-test failsafe:verify -Dtest=none -DfailIfNoTests=false

    - name: Build application
      run: mvn clean package -DskipTests

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-spring
        tags: |
          type=raw,value=latest
          type=raw,value=${{ steps.version.outputs.version }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./spring
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Install conventional-changelog
      run: npm install -g conventional-changelog-cli

    - name: Generate changelog
      id: changelog
      run: |
        conventional-changelog -p angular -i CHANGELOG.md -s -r 0
        echo "changelog_updated=true" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: release-drafter/release-drafter@v5
      with:
        config-name: release-drafter.yml
        version: ${{ steps.version.outputs.version }}
        tag: spring-v${{ steps.version.outputs.version }}
        name: Spring Release v${{ steps.version.outputs.version }}
        publish: true
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Commit changelog
      if: steps.changelog.outputs.changelog_updated == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add CHANGELOG.md
        git commit -m "docs: update CHANGELOG.md for spring-v${{ steps.version.outputs.version }}" || exit 0
        git push

    - name: Send success notification
      uses: dawidd6/action-send-mail@v6
      with:
        server_address: smtp.eu.mailgun.org
        server_port: 587
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: "âœ… Spring Production Deployment Successful - v${{ steps.version.outputs.version }}"
        to: david@thedavestack.com
        from: GitHub Actions <noreply@github.com>
        body: |
          ðŸŽ‰ Successfully deployed Spring version ${{ steps.version.outputs.version }} to production!
          
          Repository: ${{ github.repository }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          
          Docker Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-spring:${{ steps.version.outputs.version }}
          
          Release Notes: ${{ github.server_url }}/${{ github.repository }}/releases/tag/spring-v${{ steps.version.outputs.version }}
