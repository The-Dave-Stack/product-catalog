name: Environment Configuration Validation

on:
  pull_request:
    paths:
      - 'docker-compose*.yml'
      - 'src/main/resources/application*.properties'
      - 'nginx/**'
      - '.env*.example'
  push:
    branches: [ main, develop ]
    paths:
      - 'docker-compose*.yml'
      - 'src/main/resources/application*.properties'
      - 'nginx/**'
      - '.env*.example'

jobs:
  validate-environments:
    name: Validate Environment Configurations
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Java 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Validate Docker Compose files
      run: |
        echo "🔍 Validating Docker Compose syntax and configuration..."
        
        # Validate local environment
        echo "Validating local environment (docker-compose.local.yml)..."
        docker compose -f docker-compose.local.yml config
        
        # Validate stage environment
        echo "Validating stage environment (docker-compose.stage.yml)..."
        docker compose -f docker-compose.stage.yml config
        
        # Validate production environment
        echo "Validating production environment (docker-compose.prod.yml)..."
        docker compose -f docker-compose.prod.yml config
        
        echo "✅ All Docker Compose files are valid"

    - name: Validate Spring Boot configuration files
      run: |
        echo "🔍 Validating Spring Boot application properties..."
        
        # Check all required property files exist
        declare -a profiles=("local" "stage" "prod")
        
        for profile in "${profiles[@]}"
        do
          file="src/main/resources/application-${profile}.properties"
          if [ -f "$file" ]; then
            echo "✅ Found: $file"
            
            # Validate syntax by attempting to load properties
            java -cp "$(mvn dependency:build-classpath -q -Dmdep.outputFile=/dev/stdout):target/classes" \
                 -Dspring.config.location="$file" \
                 -Dspring.profiles.active="$profile" \
                 org.springframework.boot.loader.tools.JarLauncher --help > /dev/null || true
          else
            echo "❌ Missing: $file"
            exit 1
          fi
        done
        
        echo "✅ All Spring Boot property files are valid"

    - name: Validate Nginx configurations
      run: |
        echo "🔍 Validating Nginx configuration files..."
        
        # Install nginx for syntax validation
        sudo apt-get update && sudo apt-get install -y nginx
        
        declare -a configs=("nginx.conf" "nginx-stage.conf" "nginx-prod.conf")
        
        for config in "${configs[@]}"
        do
          file="nginx/${config}"
          if [ -f "$file" ]; then
            echo "Validating nginx/${config}..."
            sudo nginx -t -c "$(pwd)/${file}"
            echo "✅ Valid: $file"
          else
            echo "❌ Missing: $file"
            exit 1
          fi
        done
        
        echo "✅ All Nginx configuration files are valid"

    - name: Validate environment example files
      run: |
        echo "🔍 Validating environment example files..."
        
        declare -a env_files=(".env.local.example" ".env.stage.example" ".env.prod.example")
        
        for env_file in "${env_files[@]}"
        do
          if [ -f "$env_file" ]; then
            echo "✅ Found: $env_file"
            
            # Validate that required variables are present
            required_vars=("DATABASE_NAME" "DATABASE_USERNAME" "JWT_SECRET" "MCP_SERVER_NAME")
            
            for var in "${required_vars[@]}"
            do
              if grep -q "^${var}=" "$env_file"; then
                echo "  ✅ Required variable $var found"
              else
                echo "  ❌ Required variable $var missing in $env_file"
                exit 1
              fi
            done
          else
            echo "❌ Missing: $env_file"
            exit 1
          fi
        done
        
        echo "✅ All environment example files are valid"

    - name: Test environment configuration consistency
      run: |
        echo "🔍 Testing environment configuration consistency..."
        
        # Build the application first
        mvn clean compile -q
        
        # Test each profile can be loaded without errors
        declare -a profiles=("local" "stage" "prod")
        
        for profile in "${profiles[@]}"
        do
          echo "Testing Spring profile: $profile"
          mvn spring-boot:run -Dspring-boot.run.profiles="$profile" \
                              -Dspring-boot.run.arguments="--server.port=0 --spring.main.web-environment=false" \
                              -q &
          pid=$!
          sleep 5
          kill $pid 2>/dev/null || true
          echo "✅ Profile $profile loads successfully"
        done
        
        echo "✅ All environment configurations are consistent"

    - name: Generate validation report
      if: always()
      run: |
        echo "📋 Environment Validation Summary"
        echo "================================"
        echo "Local Environment: docker-compose.local.yml + application-local.properties"
        echo "Stage Environment: docker-compose.stage.yml + application-stage.properties"  
        echo "Production Environment: docker-compose.prod.yml + application-prod.properties"
        echo ""
        echo "All environments validated successfully! 🎉"