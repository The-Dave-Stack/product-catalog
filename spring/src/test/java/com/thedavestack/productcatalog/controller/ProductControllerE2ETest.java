/**
 * ProductControllerE2ETest.java
 *
 * <p>Purpose: - Implements end-to-end tests for the Product Catalog API using RestAssured and
 * Testcontainers. - Verifies the API's functionality for creating, retrieving, and handling
 * products under various scenarios. - Tests the complete application stack from HTTP requests to
 * database persistence.
 *
 * <p>Logic Overview: 1. Extends BaseE2ETest to leverage the shared PostgreSQL container and Spring
 * Boot application setup. 2. Uses RestAssured to send HTTP requests to the running Spring Boot
 * application. 3. Asserts the responses based on expected status codes, body content, and error
 * messages. 4. Covers happy path, duplicate SKU, and invalid data scenarios. 5. Includes debug
 * logging for test traceability.
 *
 * <p>Last Updated: 2025-08-04 by Cline (Model: claude-3-5-sonnet, Task: Migrate E2E tests to main
 * project)
 */
package com.thedavestack.productcatalog.controller;

import static io.restassured.RestAssured.given;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.emptyString;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.not;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.thedavestack.productcatalog.BaseE2ETest;

import io.restassured.http.ContentType;

public class ProductControllerE2ETest extends BaseE2ETest {

    private static final Logger logger = LoggerFactory.getLogger(ProductControllerE2ETest.class);

    @Test
    @DisplayName("Should create a product successfully with provided SKU")
    void shouldCreateProductSuccessfully() {
        logger.info("=== Test: Create Product Successfully ===");

        String requestBody =
                "{ \"name\": \"Test Product\", \"description\": \"A product for testing\", \"price\": 99.99, \"sku\": \"TP-001\" }";

        logApiCall("POST", "/api/v1/products", 201);

        String response =
                given().contentType(ContentType.JSON)
                        .body(requestBody)
                        .when()
                        .post("/api/v1/products")
                        .then()
                        .statusCode(201)
                        .body("id", notNullValue())
                        .body("name", equalTo("Test Product"))
                        .body("description", equalTo("A product for testing"))
                        .body("price", equalTo(99.99F))
                        .body("sku", equalTo("TP-001"))
                        .extract()
                        .asString();

        logApiResponse("POST", "/api/v1/products", 201, response);
        logger.info("Product created successfully with SKU: TP-001");
    }

    @Test
    @DisplayName("Should create a product with auto-generated SKU when not provided")
    void shouldCreateProductWithAutoGeneratedSku() {
        logger.info("=== Test: Create Product with Auto-Generated SKU ===");

        String requestBody =
                "{ \"name\": \"Auto SKU Product\", \"description\": \"Product without SKU\", \"price\": 49.99 }";

        logApiCall("POST", "/api/v1/products", 201);

        String response =
                given().contentType(ContentType.JSON)
                        .body(requestBody)
                        .when()
                        .post("/api/v1/products")
                        .then()
                        .statusCode(201)
                        .body("id", notNullValue())
                        .body("name", equalTo("Auto SKU Product"))
                        .body("description", equalTo("Product without SKU"))
                        .body("price", equalTo(49.99F))
                        .body("sku", notNullValue())
                        .body("sku", not(emptyString()))
                        .extract()
                        .asString();

        logApiResponse("POST", "/api/v1/products", 201, response);
        logger.info("Product created successfully with auto-generated SKU");
    }

    @Test
    @DisplayName("Should not create product with duplicate SKU")
    void shouldNotCreateProductWithDuplicateSku() {
        logger.info("=== Test: Duplicate SKU Validation ===");

        // Create first product
        String firstProduct =
                "{ \"name\": \"Product A\", \"description\": \"Desc A\", \"price\": 10.00, \"sku\": \"DUPLICATE-SKU\" }";

        logApiCall("POST", "/api/v1/products", 201);
        String firstResponse =
                given().contentType(ContentType.JSON)
                        .body(firstProduct)
                        .when()
                        .post("/api/v1/products")
                        .then()
                        .statusCode(201)
                        .extract()
                        .asString();

        logApiResponse("POST", "/api/v1/products", 201, firstResponse);
        logger.info("First product created with SKU: DUPLICATE-SKU");

        // Attempt to create second product with same SKU
        String secondProduct =
                "{ \"name\": \"Product B\", \"description\": \"Desc B\", \"price\": 20.00, \"sku\": \"DUPLICATE-SKU\" }";

        logApiCall("POST", "/api/v1/products", 409);
        String errorResponse =
                given().contentType(ContentType.JSON)
                        .body(secondProduct)
                        .when()
                        .post("/api/v1/products")
                        .then()
                        .statusCode(409) // Conflict
                        .body(
                                "message",
                                containsString("Product with SKU DUPLICATE-SKU already exists"))
                        .extract()
                        .asString();

        logApiResponse("POST", "/api/v1/products", 409, errorResponse);
        logger.info("Duplicate SKU validation working correctly");
    }

    @Test
    @DisplayName("Should not create product with invalid data (missing name)")
    void shouldNotCreateProductWithInvalidData() {
        logger.info("=== Test: Invalid Data Validation ===");

        String requestBody =
                "{ \"description\": \"Invalid product\", \"price\": 50.00, \"sku\": \"INV-001\" }";

        logApiCall("POST", "/api/v1/products", 400);

        String errorResponse =
                given().contentType(ContentType.JSON)
                        .body(requestBody)
                        .when()
                        .post("/api/v1/products")
                        .then()
                        .statusCode(400) // Bad Request
                        .body("message", containsString("Name cannot be empty"))
                        .extract()
                        .asString();

        logApiResponse("POST", "/api/v1/products", 400, errorResponse);
        logger.info("Input validation working correctly for missing name");
    }

    @Test
    @DisplayName("Should retrieve product by ID")
    void shouldRetrieveProductById() {
        logger.info("=== Test: Retrieve Product by ID ===");

        // Create a product first
        String requestBody =
                "{ \"name\": \"Retrieve Product\", \"description\": \"To be retrieved\", \"price\": 123.45, \"sku\": \"RET-001\" }";

        logApiCall("POST", "/api/v1/products", 201);
        String productId =
                given().contentType(ContentType.JSON)
                        .body(requestBody)
                        .when()
                        .post("/api/v1/products")
                        .then()
                        .statusCode(201)
                        .extract()
                        .path("id");

        logger.info("Product created with ID: {}", productId);

        // Retrieve the product
        logApiCall("GET", "/api/v1/products/" + productId, 200);
        String retrieveResponse =
                given().when()
                        .get("/api/v1/products/{id}", productId)
                        .then()
                        .statusCode(200)
                        .body("id", equalTo(productId))
                        .body("name", equalTo("Retrieve Product"))
                        .body("sku", equalTo("RET-001"))
                        .extract()
                        .asString();

        logApiResponse("GET", "/api/v1/products/" + productId, 200, retrieveResponse);
        logger.info("Product retrieved successfully by ID: {}", productId);
    }

    @Test
    @DisplayName("Should return 404 for non-existent product ID")
    void shouldReturn404ForNonExistentProductId() {
        logger.info("=== Test: Non-Existent Product ID ===");

        String nonExistentId = "non-existent-id-123";

        logApiCall("GET", "/api/v1/products/" + nonExistentId, 404);
        String errorResponse =
                given().when()
                        .get("/api/v1/products/{id}", nonExistentId)
                        .then()
                        .statusCode(404)
                        .body(
                                "message",
                                containsString("Product not found with ID: " + nonExistentId))
                        .extract()
                        .asString();

        logApiResponse("GET", "/api/v1/products/" + nonExistentId, 404, errorResponse);
        logger.info("404 error handling working correctly for non-existent ID: {}", nonExistentId);
    }
}
