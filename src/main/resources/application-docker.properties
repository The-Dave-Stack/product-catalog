# Docker Container Optimized Configuration
# This profile is specifically designed for container deployments

# Application name
spring.application.name=product-catalog-spring

# Database configuration for containers
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://postgres-db:5432/product_catalog}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:user}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:password}

# Connection pool optimization for containers
spring.datasource.hikari.maximum-pool-size=${HIKARI_MAX_POOL_SIZE:15}
spring.datasource.hikari.minimum-idle=${HIKARI_MIN_IDLE:5}
spring.datasource.hikari.idle-timeout=${HIKARI_IDLE_TIMEOUT:300000}
spring.datasource.hikari.connection-timeout=${HIKARI_CONNECTION_TIMEOUT:20000}
spring.datasource.hikari.max-lifetime=${HIKARI_MAX_LIFETIME:1200000}
spring.datasource.hikari.leak-detection-threshold=${HIKARI_LEAK_DETECTION:60000}

# Spring AI MCP Server Configuration
spring.ai.mcp.server.enabled=${MCP_SERVER_ENABLED:true}
spring.ai.mcp.server.name=${MCP_SERVER_NAME:product-catalog-mcp-server}
spring.ai.mcp.server.version=${MCP_SERVER_VERSION:2.0.0}
spring.ai.mcp.server.type=SYNC
spring.ai.mcp.server.instructions=Enterprise Product Catalog Management Server with AI-powered tools, resources, and prompts for comprehensive catalog operations
spring.ai.mcp.server.sse-endpoint=${MCP_SSE_ENDPOINT:/sse}

# MCP Server Capabilities
spring.ai.mcp.server.capabilities.tool=true
spring.ai.mcp.server.capabilities.resource=true
spring.ai.mcp.server.capabilities.prompt=true
spring.ai.mcp.server.capabilities.completion=true

# MCP Server Notifications
spring.ai.mcp.server.tool-change-notification=true
spring.ai.mcp.server.resource-change-notification=true
spring.ai.mcp.server.prompt-change-notification=true

# JPA settings for containers
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true

# Container-friendly logging with structured format
logging.level.com.thedavestack.productcatalog=${LOG_LEVEL:INFO}
logging.level.org.springframework.security=WARN
logging.level.org.hibernate=WARN
logging.level.org.springframework.web=WARN
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%logger{36}] - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%logger{36}] - %msg%n

# JWT configuration with environment variables
app.jwt.secret=${JWT_SECRET:mySecretKey1234567890123456789012345678901234567890}
app.jwt.expiration=${JWT_EXPIRATION:86400}

# Server configuration for containers
server.port=${SERVER_PORT:8080}
server.compression.enabled=true
server.compression.mime-types=application/json,application/xml,text/html,text/xml,text/plain,application/javascript,text/css
server.compression.min-response-size=1024

# Container-optimized actuator settings
management.endpoints.web.exposure.include=${ACTUATOR_ENDPOINTS:health,info,metrics,productmetrics,audit}
management.endpoint.health.show-details=${ACTUATOR_HEALTH_DETAILS:when-authorized}
management.endpoint.health.show-components=always
management.endpoint.health.probes.enabled=true
management.endpoint.info.enabled=true
management.endpoint.metrics.enabled=true
management.info.env.enabled=true

# Health check optimizations for containers
management.health.db.enabled=true
management.health.diskspace.enabled=true
management.health.ping.enabled=true

# Enhanced 404 Error Handling
spring.mvc.throw-exception-if-no-handler-found=true

# Container security settings
server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.secure=${COOKIE_SECURE:false}
server.servlet.session.timeout=${SESSION_TIMEOUT:30m}

# Error handling
server.error.include-message=always
server.error.include-binding-errors=always
server.error.include-stacktrace=never
server.error.include-exception=false

# Async processing for containers
spring.task.execution.pool.core-size=${ASYNC_CORE_POOL_SIZE:2}
spring.task.execution.pool.max-size=${ASYNC_MAX_POOL_SIZE:5}
spring.task.execution.pool.queue-capacity=${ASYNC_QUEUE_CAPACITY:100}
spring.task.execution.thread-name-prefix=ProductCatalog-Async-

# Cache and performance optimizations
spring.jpa.properties.hibernate.cache.use_second_level_cache=false
spring.jpa.properties.hibernate.cache.use_query_cache=false

# Monitoring and observability
management.metrics.export.prometheus.enabled=${PROMETHEUS_ENABLED:false}
management.tracing.sampling.probability=${TRACING_SAMPLING:0.0}